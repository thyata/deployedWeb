{"version":3,"file":"static/js/3829.9af84d73.chunk.js","mappings":"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","sources":["components/confirm-dialog/ConfirmDialog.tsx","components/custom-breadcrumbs/LinkItem.tsx","components/custom-breadcrumbs/CustomBreadcrumbs.tsx","components/empty-content/EmptyContent.tsx","components/table/utils.ts","components/table/useTable.ts","components/table/TableNoData.tsx","components/table/TableEmptyRows.tsx","components/table/TableHeadCustom.tsx","components/table/TableSelectedAction.tsx","components/table/TablePaginationCustom.tsx","pages/dashboard/InvoiceListPage.tsx"],"sourcesContent":["// @mui\nimport { Dialog, Button, DialogTitle, DialogActions, DialogContent } from '@mui/material';\n//\nimport { ConfirmDialogProps } from './types';\n\n// ----------------------------------------------------------------------\n\nexport default function ConfirmDialog({\n  title,\n  content,\n  action,\n  open,\n  onClose,\n  ...other\n}: ConfirmDialogProps) {\n  return (\n    <Dialog fullWidth maxWidth=\"xs\" open={open} onClose={onClose} {...other}>\n      <DialogTitle sx={{ pb: 2 }}>{title}</DialogTitle>\n\n      {content && <DialogContent sx={{ typography: 'body2' }}> {content} </DialogContent>}\n\n      <DialogActions>\n        {action}\n\n        <Button variant=\"outlined\" color=\"inherit\" onClick={onClose}>\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { Box, Link } from '@mui/material';\n//\nimport { BreadcrumbsLinkProps } from './types';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  link: BreadcrumbsLinkProps;\n  activeLast?: boolean;\n  disabled: boolean;\n};\n\nexport default function BreadcrumbsLink({ link, activeLast, disabled }: Props) {\n  const { name, href, icon } = link;\n\n  const styles = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    color: 'text.primary',\n    ...(disabled &&\n      !activeLast && {\n        cursor: 'default',\n        pointerEvents: 'none',\n        color: 'text.disabled',\n      }),\n  };\n\n  const renderContent = (\n    <>\n      {icon && (\n        <Box\n          component=\"span\"\n          sx={{\n            mr: 1,\n            display: 'inherit',\n            '& svg': { width: 20, height: 20 },\n          }}\n        >\n          {icon}\n        </Box>\n      )}\n\n      {name}\n    </>\n  );\n\n  if (href) {\n    return (\n      <Link component={RouterLink} to={href} sx={styles}>\n        {renderContent}\n      </Link>\n    );\n  }\n\n  return <Box sx={styles}> {renderContent} </Box>;\n}\n","// @mui\nimport { Box, Link, Stack, Typography, Breadcrumbs } from '@mui/material';\n//\nimport { CustomBreadcrumbsProps } from './types';\nimport LinkItem from './LinkItem';\n\n// ----------------------------------------------------------------------\n\nexport default function CustomBreadcrumbs({\n  links,\n  action,\n  heading,\n  moreLink,\n  activeLast,\n  sx,\n  ...other\n}: CustomBreadcrumbsProps) {\n  const lastLink = links[links.length - 1].name;\n\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          {/* HEADING */}\n          {heading && (\n            <Typography variant=\"h4\" gutterBottom>\n              {heading}\n            </Typography>\n          )}\n\n          {/* BREADCRUMBS */}\n          {!!links.length && (\n            <Breadcrumbs separator={<Separator />} {...other}>\n              {links.map((link) => (\n                <LinkItem\n                  key={link.name || ''}\n                  link={link}\n                  activeLast={activeLast}\n                  disabled={link.name === lastLink}\n                />\n              ))}\n            </Breadcrumbs>\n          )}\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}> {action} </Box>}\n      </Stack>\n\n      {/* MORE LINK */}\n      {!!moreLink && (\n        <Box sx={{ mt: 2 }}>\n          {moreLink.map((href) => (\n            <Link\n              noWrap\n              key={href}\n              href={href}\n              variant=\"body2\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              sx={{ display: 'table' }}\n            >\n              {href}\n            </Link>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nfunction Separator() {\n  return (\n    <Box\n      component=\"span\"\n      sx={{ width: 4, height: 4, borderRadius: '50%', bgcolor: 'text.disabled' }}\n    />\n  );\n}\n","// @mui\nimport { Typography, Stack, StackProps } from '@mui/material';\n//\nimport Image from '../image';\n\n// ----------------------------------------------------------------------\n\ninterface EmptyContentProps extends StackProps {\n  title: string;\n  img?: string;\n  description?: string;\n}\n\nexport default function EmptyContent({ title, description, img, sx, ...other }: EmptyContentProps) {\n  return (\n    <Stack\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      sx={{\n        height: 1,\n        textAlign: 'center',\n        p: (theme) => theme.spacing(8, 2),\n        ...sx,\n      }}\n      {...other}\n    >\n      <Image\n        disabledEffect\n        alt=\"empty content\"\n        src={img || '/assets/illustrations/illustration_empty_content.svg'}\n        sx={{ height: 240, mb: 3 }}\n      />\n\n      <Typography variant=\"h5\" gutterBottom>\n        {title}\n      </Typography>\n\n      {description && (\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          {description}\n        </Typography>\n      )}\n    </Stack>\n  );\n}\n","// ----------------------------------------------------------------------\n\nexport function emptyRows(page: number, rowsPerPage: number, arrayLength: number) {\n  return page > 0 ? Math.max(0, (1 + page) * rowsPerPage - arrayLength) : 0;\n}\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function getComparator<Key extends keyof any>(\n  order: 'asc' | 'desc',\n  orderBy: Key\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n","import { useState, useCallback } from 'react';\n//\nimport { TableProps } from './types';\n\n// ----------------------------------------------------------------------\n\ntype ReturnType = TableProps;\n\nexport type UseTableProps = {\n  defaultDense?: boolean;\n  defaultOrder?: 'asc' | 'desc';\n  defaultOrderBy?: string;\n  defaultSelected?: string[];\n  defaultRowsPerPage?: number;\n  defaultCurrentPage?: number;\n};\n\nexport default function useTable(props?: UseTableProps): ReturnType {\n  const [dense, setDense] = useState(!!props?.defaultDense);\n\n  const [orderBy, setOrderBy] = useState(props?.defaultOrderBy || 'name');\n\n  const [order, setOrder] = useState<'asc' | 'desc'>(props?.defaultOrder || 'asc');\n\n  const [page, setPage] = useState(props?.defaultCurrentPage || 0);\n\n  const [rowsPerPage, setRowsPerPage] = useState(props?.defaultRowsPerPage || 5);\n\n  const [selected, setSelected] = useState<string[]>(props?.defaultSelected || []);\n\n  const onSort = useCallback(\n    (id: string) => {\n      const isAsc = orderBy === id && order === 'asc';\n      if (id !== '') {\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(id);\n      }\n    },\n    [order, orderBy]\n  );\n\n  const onSelectRow = useCallback(\n    (id: string) => {\n      const selectedIndex = selected.indexOf(id);\n\n      let newSelected: string[] = [];\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, id);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n          selected.slice(0, selectedIndex),\n          selected.slice(selectedIndex + 1)\n        );\n      }\n      setSelected(newSelected);\n    },\n    [selected]\n  );\n\n  const onSelectAllRows = useCallback((checked: boolean, newSelecteds: string[]) => {\n    if (checked) {\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  }, []);\n\n  const onChangePage = useCallback((event: unknown, newPage: number) => {\n    setPage(newPage);\n  }, []);\n\n  const onChangeRowsPerPage = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setRowsPerPage(parseInt(event.target.value, 10));\n    console.log('onChangeRowsPerPage Is Here',event.target.value);\n  }, []);\n\n  const onChangeDense = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setDense(event.target.checked);\n  }, []);\n\n  return {\n    dense,\n    order,\n    page,\n    orderBy,\n    rowsPerPage,\n    //\n    selected,\n    onSelectRow,\n    onSelectAllRows,\n    //\n    onSort,\n    onChangePage,\n    onChangeDense,\n    onChangeRowsPerPage,\n    //\n    setPage,\n    setDense,\n    setOrder,\n    setOrderBy,\n    setSelected,\n    setRowsPerPage,\n  };\n}\n","// @mui\nimport { TableRow, TableCell } from '@mui/material';\n//\nimport EmptyContent from '../empty-content';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  isNotFound: boolean;\n};\n\nexport default function TableNoData({ isNotFound }: Props) {\n  return (\n    <TableRow>\n      {isNotFound ? (\n        <TableCell colSpan={12}>\n          <EmptyContent\n            title=\"No Data\"\n            sx={{\n              '& span.MuiBox-root': { height: 160 },\n            }}\n          />\n        </TableCell>\n      ) : (\n        <TableCell colSpan={12} sx={{ p: 0 }} />\n      )}\n    </TableRow>\n  );\n}\n","// @mui\nimport { TableRow, TableCell } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  height?: number;\n  emptyRows: number;\n};\n\nexport default function TableEmptyRows({ emptyRows, height }: Props) {\n  if (!emptyRows) {\n    return null;\n  }\n\n  return (\n    <TableRow\n      sx={{\n        ...(height && {\n          height: height * emptyRows,\n        }),\n      }}\n    >\n      <TableCell colSpan={9} />\n    </TableRow>\n  );\n}\n","// @mui\nimport { Theme } from '@mui/material/styles';\nimport {\n  Box,\n  SxProps,\n  Checkbox,\n  TableRow,\n  TableCell,\n  TableHead,\n  TableSortLabel,\n} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst visuallyHidden = {\n  border: 0,\n  margin: -1,\n  padding: 0,\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  position: 'absolute',\n  whiteSpace: 'nowrap',\n  clip: 'rect(0 0 0 0)',\n} as const;\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  order?: 'asc' | 'desc';\n  orderBy?: string;\n  headLabel: any[];\n  rowCount?: number;\n  numSelected?: number;\n  onSort?: (id: string) => void;\n  onSelectAllRows?: (checked: boolean) => void;\n  sx?: SxProps<Theme>;\n};\n\nexport default function TableHeadCustom({\n  order,\n  orderBy,\n  rowCount = 0,\n  headLabel,\n  numSelected = 0,\n  onSort,\n  onSelectAllRows,\n  sx,\n}: Props) {\n  return (\n    <TableHead sx={sx}>\n      <TableRow>\n        {onSelectAllRows && (\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={rowCount > 0 && numSelected === rowCount}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                onSelectAllRows(event.target.checked)\n              }\n            />\n          </TableCell>\n        )}\n\n        {headLabel.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.align || 'left'}\n            sortDirection={orderBy === headCell.id ? order : false}\n            sx={{ width: headCell.width, minWidth: headCell.minWidth }}\n          >\n            {onSort ? (\n              <TableSortLabel\n                hideSortIcon\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                onClick={() => onSort(headCell.id)}\n                sx={{ textTransform: 'capitalize' }}\n              >\n                {headCell.label}\n\n                {orderBy === headCell.id ? (\n                  <Box sx={{ ...visuallyHidden }}>\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                  </Box>\n                ) : null}\n              </TableSortLabel>\n            ) : (\n              headCell.label\n            )}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","// @mui\nimport { Checkbox, Typography, Stack, StackProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\ninterface Props extends StackProps {\n  dense?: boolean;\n  action?: React.ReactNode;\n  rowCount: number;\n  numSelected: number;\n  onSelectAllRows: (checked: boolean) => void;\n}\n\nexport default function TableSelectedAction({\n  dense,\n  action,\n  rowCount,\n  numSelected,\n  onSelectAllRows,\n  sx,\n  ...other\n}: Props) {\n  if (!numSelected) {\n    return null;\n  }\n\n  return (\n    <Stack\n      direction=\"row\"\n      alignItems=\"center\"\n      sx={{\n        pl: 1,\n        pr: 2,\n        top: 0,\n        left: 0,\n        width: 1,\n        zIndex: 9,\n        height: 58,\n        position: 'absolute',\n        bgcolor: 'primary.lighter',\n        ...(dense && {\n          height: 38,\n        }),\n        ...sx,\n      }}\n      {...other}\n    >\n      <Checkbox\n        indeterminate={numSelected > 0 && numSelected < rowCount}\n        checked={rowCount > 0 && numSelected === rowCount}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n          onSelectAllRows(event.target.checked)\n        }\n      />\n\n      <Typography\n        variant=\"subtitle1\"\n        sx={{\n          ml: 2,\n          flexGrow: 1,\n          color: 'primary.main',\n          ...(dense && {\n            ml: 3,\n          }),\n        }}\n      >\n        {numSelected} sélectionné\n      </Typography>\n\n      {action && action}\n    </Stack>\n  );\n}\n","// @mui\nimport { Theme } from '@mui/material/styles';\nimport {\n  Box,\n  Switch,\n  SxProps,\n  TablePagination,\n  FormControlLabel,\n  TablePaginationProps,\n} from '@mui/material';\n//\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  dense?: boolean;\n  onChangeDense?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  sx?: SxProps<Theme>;\n};\n\nexport default function TablePaginationCustom({\n  dense,\n  onChangeDense,\n  rowsPerPageOptions = [5, 10, 20,25],\n  sx,\n  ...other\n}: Props & TablePaginationProps) {\n  return (\n    <Box sx={{ position: 'relative', ...sx }}>\n      <TablePagination rowsPerPageOptions={rowsPerPageOptions} component=\"div\" {...other} />\n\n      {onChangeDense && (\n        <FormControlLabel\n          label=\"Dense\"\n          control={<Switch checked={dense} onChange={onChangeDense} />}\n          sx={{\n            pl: 2,\n            py: 1.5,\n            top: 0,\n            position: {\n              md: 'absolute',\n            },\n          }}\n        />\n      )}\n    </Box>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// @mui\nimport { useTheme } from '@mui/material/styles';\nimport {\n  Tab,\n  Tabs,\n  Card,\n  Table,\n  Stack,\n  Button,\n  Tooltip,\n  Divider,\n  TableBody,\n  Container,\n  IconButton,\n  TableContainer,\n  TableCell,\n  CircularProgress,\n} from '@mui/material';\n\nimport axiosInstance from 'src/auth/axios';\n\nimport { useEffect,useState } from \"react\";\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// utils\nimport { fTimestamp } from '../../utils/formatTime';\n// _mock_\nimport { _invoices } from '../../_mock/arrays';\n// @types\nimport { IInvoice, VaccineType } from '../../@types/vaccine';\n// components\nimport Label from '../../components/label';\nimport Iconify from '../../components/iconify';\nimport Scrollbar from '../../components/scrollbar';\nimport ConfirmDialog from '../../components/confirm-dialog';\nimport CustomBreadcrumbs from '../../components/custom-breadcrumbs';\nimport { useSettingsContext } from '../../components/settings';\nimport {\n  useTable,\n  getComparator,\n  emptyRows,\n  TableNoData,\n  TableEmptyRows,\n  TableHeadCustom,\n  TableSelectedAction,\n  TablePaginationCustom,\n} from '../../components/table';\n// sections\n// import { InvoiceTableRow, InvoiceTableToolbar } from '../../sections/@dashboard/vaccine/list';\n\n// ----------------------------------------------------------------------\n\n\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Nom', align: 'left' },\n  { id: 'type', label: 'Type', align: 'left' },\n  { id: 'administrationMode', label: 'Mode d\\'administration', align: 'left' },\n\n  // { id: '' },\n];\n\n// ----------------------------------------------------------------------\n\nexport default function InvoiceListPage() {\n  const theme = useTheme();\n\n  const { themeStretch } = useSettingsContext();\n\n  const navigate = useNavigate();\n\n  const {\n    dense,\n    page,\n    order,\n    orderBy,\n    rowsPerPage,\n    setPage,\n    //\n    selected,\n    setSelected,\n    onSelectRow,\n    onSelectAllRows,\n    //\n    onSort,\n    onChangeDense,\n    onChangePage,\n    onChangeRowsPerPage,\n  } = useTable({ defaultOrderBy: 'createDate' });\n\n  const [tableData, setTableData] = useState<any[]>([]);\n\n  const [filterName, setFilterName] = useState('');\n\n  const [openConfirm, setOpenConfirm] = useState(false);\n\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const [filterService, setFilterService] = useState('all');\n\n  const [filterEndDate, setFilterEndDate] = useState<Date | null>(null);\n  const [loading,setLoading] = useState(true);\n\n  const [filterStartDate, setFilterStartDate] = useState<Date | null>(null);\n  const [list_vaccines,setList_vaccines] = useState([]);\n\n\n  const [type_options,setTypes] = useState([]);\n  const [vaccine_type,setVaccine_type] = useState([]);\n\n\n\n// const fetchVaccines=async (page1:number,size:number,search?:string,typeId?:number)=>{\n//   console.log(\"fetch vaccines\")\n//   setLoading(true);\n// try{\n//   let url=`/hospital/vaccines/?page=${page1}&size=${size}`;\n\n//   // url_vaccine_type =`/hospital/vaccines/?page=0&size=10&type`\n//   const url_types=`/hospital/vaccines/types/?page=${page1}&size=${size}`;\n//   const list_types:any= await axiosInstance.get(url_types);\n\n//    if(search)url+=`&search=${search}`\n//    if(typeId)url+=`&typeId=${typeId}`\n//     const list:any= await axiosInstance.get(url);\n\n//    setLoading(false)\n//    setVaccine_type(list_types?.content) // utiliser pour filtreOpetions\n//    setList_vaccines(list?.content) // utiliser pour filtreName\n//     // console.log(list?.content.type);\n//     setTableData(list?.content)\n//     setTypes(list_types?.content.map((type:VaccineType)=>(type.name))) // utiliser pour selectionner le type\n\n// } catch(err){\n//   setLoading(false)\n//   console.log(err);\n// }\n//  }\n\n// useEffect(() => {\n//    fetchVaccines(0,20);\n\n// }, []);\n\n//  useEffect(()=>{\n//   if (filterName) {\n    \n//     setLoading(true)\n//     const search_res= list_vaccines.filter(\n//         (item) =>\n//         Object.values(item).join('').toLowerCase().includes(filterName.toLocaleLowerCase())\n//       );\n//       setTableData(search_res)\n//       console.log('search for',search_res)\n//       setLoading(false)\n//   };\n//   if (filterService !== 'all') {\n//     const search_res= vaccine_type.filter(\n//       (item) =>\n//       Object.values(item).join('').toLowerCase().includes(filterService.toLocaleLowerCase())\n//     );\n//     const typeID=search_res[0]\n//     // console.log('search for',search_res[0]) \n//    // console.log('typeID for',typeID['id']) \n\n//      setLoading(false)\n//      fetchVaccines(0,20,undefined,search_res[0][\"id\"]);\n//   }\n//   },[\n//     filterName,\n//     filterService\n//   ]) \n  const dataFiltered = applyFilter({\n    inputData: tableData,\n    filterName,\n    filterService,\n  \n  });\n\n  const dataInPage = dataFiltered.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n\n  const denseHeight = dense ? 56 : 76;\n\n  const isFiltered =\n    filterStatus !== 'all' ||\n    filterName !== '' ||\n    filterService !== 'all' ||\n    (!!filterStartDate && !!filterEndDate);\n\n  const isNotFound =\n    (!dataFiltered.length && !!filterName) ||\n    (!dataFiltered.length && !!filterStatus) ||\n    (!dataFiltered.length && !!filterService) ||\n    (!dataFiltered.length && !!filterEndDate) ||\n    (!dataFiltered.length && !!filterStartDate);\n\n  const getLengthByStatus = (status: string) =>\n    tableData.filter((item) => item.status === status).length;\n\n\n  const TABS = [\n    { value: 'all', label: 'All', color: 'info', count: tableData.length },\n    { value: 'disponible', label: 'Disponible', color: 'success', count: getLengthByStatus('paid') },\n    { value: 'indisponible', label: 'Indisponible', color: 'warning', count: getLengthByStatus('unpaid') },\n\n  ] as const;\n\n  const handleOpenConfirm = () => {\n    setOpenConfirm(true);\n  };\n\n  const handleCloseConfirm = () => {\n    setOpenConfirm(false);\n  };\n\n  const handleFilterStatus = (event: React.SyntheticEvent<Element, Event>, newValue: string) => {\n    setPage(0);\n    setFilterStatus(newValue);\n  };\n\n  const handleFilterName = (event: React.ChangeEvent<HTMLInputElement>) => {\n\n    setPage(0);\n    setFilterName(event.target.value);\n    \n\n    \n  };\n\n  const handleFilterService = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterService(event.target.value);\n      \n  \n     \n  };\n\n  const handleDeleteRow = (id: string) => {\n    const deleteRow = tableData.filter((row) => row.id !== id);\n    setSelected([]);\n    // setTableData(deleteRow);\n    if (page > 0) {\n      if (dataInPage.length < 2) {\n        setPage(page - 1);\n      }\n    }\n  };\n\n  const handleDeleteRows = (selectedRows: string[]) => {\n    const deleteRows = tableData.filter((row) => !selectedRows.includes(row.id));\n    setSelected([]);\n    // setTableData(deleteRows);\n\n    if (page > 0) {\n      if (selectedRows.length === dataInPage.length) {\n        setPage(page - 1);\n      } else if (selectedRows.length === dataFiltered.length) {\n        setPage(0);\n      } else if (selectedRows.length > dataInPage.length) {\n        const newPage = Math.ceil((tableData.length - selectedRows.length) / rowsPerPage) - 1;\n        setPage(newPage);\n      }\n    }\n  };\n\n  const handleEditRow = (row: any) => {\n    navigate(`/dashboard/vaccine/${row.id}`,{\n      state:row\n    });\n  };\n\n  const handleViewRow = (row:any) => {\n    \n    navigate(`/dashboard/vaccine/${row.id}`,{\n      state: {\n        name: row.name,\n       // email:row.email,\n       // body: row.body,\n      },\n    });\n  };\n\n  const handleResetFilter = () => {\n    setFilterName('');\n   \n    setFilterService('all');\n   \n   // fetchVaccines(0,20); \n   \n  };\n\n  return (\n    <>\n      <Helmet>\n        <title> Vaccins: Liste </title>\n      </Helmet>\n\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <CustomBreadcrumbs\n          heading=\"La liste des vaccins\"\n          links={[\n            {\n              name: 'Dashboard',\n              href: PATH_DASHBOARD.root,\n            },\n            {\n              name: 'Vaccins',\n              href: PATH_DASHBOARD.vaccine.root,\n            },\n            {\n              name: 'Liste',\n            },\n          ]}\n        action={\n         \n                 <Button\n                 component={RouterLink}\n                 to={PATH_DASHBOARD.vaccinCamp.create_vaccine}\n                 variant=\"contained\"\n                 startIcon={<Iconify icon=\"eva:plus-fill\" />}\n               >\n                Ajouter un vaccin\n\n               </Button>\n        }\n        />\n        {/* <Card>\n          <Tabs\n            value={filterStatus}\n            onChange={handleFilterStatus}\n            sx={{\n              px: 2,\n              bgcolor: 'background.neutral',\n            }}\n          >\n            {TABS.map((tab) => (\n              <Tab\n                key={tab.value}\n                value={tab.value}\n                label={tab.label}\n                icon={\n                  <Label color={tab.color} sx={{ mr: 1 }}>\n                    {tab.count}\n                  </Label>\n                }\n              />\n            ))}\n          </Tabs>\n\n          <Divider />\n\n          <InvoiceTableToolbar\n            isFiltered={isFiltered}\n            filterName={filterName}\n            filterService={filterService}\n            filterEndDate={filterEndDate}\n            onFilterName={handleFilterName}\n            optionsService={type_options}\n            onResetFilter={handleResetFilter}\n            filterStartDate={filterStartDate}\n            onFilterService={handleFilterService}\n            onFilterStartDate={(newValue) => {\n              setFilterStartDate(newValue);\n            }}\n            onFilterEndDate={(newValue) => {\n              setFilterEndDate(newValue);\n            }}\n          />\n\n          <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\n            <TableSelectedAction\n              dense={dense}\n              numSelected={selected.length}\n              rowCount={tableData.length}\n              onSelectAllRows={(checked) =>\n                onSelectAllRows(\n                  checked,\n                  tableData.map((row) => row.id)\n                )\n              }\n              action={\n                <Stack direction=\"row\">\n                  <Tooltip title=\"Sent\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"ic:round-send\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Download\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:download-outline\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Print\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:printer-fill\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Delete\">\n                    <IconButton color=\"primary\" onClick={handleOpenConfirm}>\n                      <Iconify icon=\"eva:trash-2-outline\" />\n                    </IconButton>\n                  </Tooltip>\n                </Stack>\n              }\n            />\n\n            <Scrollbar>\n              <Table  size={dense ? 'small' : 'medium'} sx={{ minWidth: 800 }}   >\n                <TableHeadCustom\n                  order={order}\n                  orderBy={orderBy}\n                  headLabel={TABLE_HEAD}\n                  rowCount={tableData.length}\n                  numSelected={selected.length}\n                  onSort={onSort}\n                  onSelectAllRows={(checked) =>\n                    onSelectAllRows(\n                      checked,\n                      tableData.map((row) => row.id)\n                    )\n                  }\n                />\n        {\n          loading ? (<TableBody>\n                  \n                   \n            {dataFiltered.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n               <InvoiceTableRow\n                 key={row.id}\n                 row={row}\n                 selected={selected.includes(row.id)}\n                 onSelectRow={() => onSelectRow(row.id)}\n                 onViewRow={() => handleViewRow(row)}\n                 onEditRow={() => handleEditRow(row)}\n                 onDeleteRow={() => handleDeleteRow(row.id)}\n               />\n             ))}\n\n           \n<TableCell colSpan={3} align='center'>\n  <div style={{display: 'flex',justifyContent:'center',alignItems:'center'}}>\n  <CircularProgress  />\n\n  </div>\n</TableCell>\n           \n         </TableBody>):(<TableBody>\n                  \n                   \n            {dataFiltered.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n               <InvoiceTableRow\n                 key={row.id}\n                 row={row}\n                 selected={selected.includes(row.id)}\n                 onSelectRow={() => onSelectRow(row.id)}\n                 onViewRow={() => handleViewRow(row)}\n                 onEditRow={() => handleEditRow(row)}\n                 onDeleteRow={() => handleDeleteRow(row.id)}\n               />\n             ))}\n\n           <TableEmptyRows\n             height={denseHeight}\n             emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\n           />\n\n           <TableNoData isNotFound={isNotFound} /> \n           \n         </TableBody>)\n        }\n                \n              </Table>\n            </Scrollbar>\n          </TableContainer>\n\n          <TablePaginationCustom\n            count={dataFiltered.length}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            onPageChange={onChangePage}\n            onRowsPerPageChange={onChangeRowsPerPage}\n            //\n            dense={dense}\n            onChangeDense={onChangeDense}\n          />\n        </Card> */}\n      </Container>\n\n      <ConfirmDialog\n        open={openConfirm}\n        onClose={handleCloseConfirm}\n        title=\"Delete\"\n        content={\n          <>\n            Are you sure want to delete <strong> {selected.length} </strong> items?\n          </>\n        }\n        action={\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              handleDeleteRows(selected);\n              handleCloseConfirm();\n            }}\n          >\n            Delete\n          </Button>\n        }\n      />\n    </>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nfunction applyFilter({\n  inputData,\n  filterName,\n  filterService,\n\n}: {\n  inputData: IInvoice[];\n  filterName: string;\n  filterService: string;\n\n}) {\n /* \n  const stabilizedThis = inputData.map((el, index) => [el, index] as const);\n\n \n\n  inputData = stabilizedThis.map((el) => el[0]);\n\n  \n\n  \n \n  if (filterService !== 'all') {\n      inputData = inputData.filter((invoice) =>\n      invoice.items.some((c) => c.service === filterService)\n    );\n  } \n */\n\n\n  return inputData;\n}\n"],"names":["ConfirmDialog","title","content","action","open","onClose","other","Dialog","fullWidth","maxWidth","DialogTitle","sx","pb","DialogContent","typography","DialogActions","Button","variant","color","onClick","BreadcrumbsLink","link","activeLast","disabled","name","href","icon","styles","display","alignItems","cursor","pointerEvents","renderContent","Box","component","mr","width","height","Link","RouterLink","to","CustomBreadcrumbs","links","heading","moreLink","lastLink","length","mb","Stack","direction","flexGrow","Typography","gutterBottom","Breadcrumbs","separator","Separator","map","flexShrink","mt","noWrap","target","rel","borderRadius","bgcolor","EmptyContent","description","img","justifyContent","textAlign","p","theme","spacing","disabledEffect","alt","src","emptyRows","page","rowsPerPage","arrayLength","Math","max","descendingComparator","a","b","orderBy","getComparator","order","useTable","props","useState","defaultDense","dense","setDense","defaultOrderBy","setOrderBy","defaultOrder","setOrder","defaultCurrentPage","setPage","defaultRowsPerPage","setRowsPerPage","defaultSelected","selected","setSelected","onSort","useCallback","id","onSelectRow","selectedIndex","indexOf","newSelected","concat","slice","onSelectAllRows","checked","newSelecteds","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","value","console","log","onChangeDense","TableNoData","isNotFound","colSpan","TableEmptyRows","visuallyHidden","border","margin","padding","overflow","position","whiteSpace","clip","TableHeadCustom","rowCount","headLabel","numSelected","TableHead","Checkbox","indeterminate","onChange","headCell","align","sortDirection","minWidth","TableSortLabel","hideSortIcon","active","textTransform","label","TableSelectedAction","pl","pr","top","left","zIndex","ml","TablePaginationCustom","rowsPerPageOptions","TablePagination","FormControlLabel","control","Switch","py","md","InvoiceListPage","useTheme","themeStretch","useSettingsContext","useNavigate","tableData","filterName","openConfirm","setOpenConfirm","filterStatus","filterService","filterEndDate","filterStartDate","dataFiltered","inputData","applyFilter","dataInPage","getLengthByStatus","status","filter","item","handleCloseConfirm","PATH_DASHBOARD","startIcon","selectedRows","row","includes","ceil","handleDeleteRows"],"sourceRoot":""}