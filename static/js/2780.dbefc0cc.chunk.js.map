{"version":3,"file":"static/js/2780.dbefc0cc.chunk.js","mappings":"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","sources":["pages/dashboard/vaccination/List/campainDetails/gestionnaire_des_erreurs/ErrorCampainDetailsPage.tsx"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// @mui\nimport { useTheme } from '@mui/material/styles';\nimport {\n  Tab,\n  Tabs,\n  Card,\n  Table,\n  Stack,\n  Button,\n  Tooltip,\n  Divider,\n  TableBody,\n  Container,\n  IconButton,\n  TableContainer,\n} from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from 'src/routes/paths';\n// _mock_\nimport { _invoices } from 'src/_mock/arrays';\n// @types\nimport { ActeFromAPI } from 'src/@types/Campain';\n// components\nimport Label from 'src/components/label';\nimport Iconify from 'src/components/iconify';\nimport Scrollbar from 'src/components/scrollbar';\nimport ConfirmDialog from 'src/components/confirm-dialog';\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\nimport { useSettingsContext } from 'src/components/settings';\nimport {\n  useTable,\n  emptyRows,\n  TableNoData,\n  TableEmptyRows,\n  TableHeadCustom,\n  TableSelectedAction,\n  TablePaginationCustom,\n} from 'src/components/table';\n// sections\nimport {\n  ActesTableRow,\n  ActesTableToolbar,\n} from 'src/sections/@dashboard/vaccinCampagne/Details/list';\n// service\nimport CampainService from 'src/services/CampainService';\nimport { Member } from 'src/assets/data/listMembers';\n// ----------------------------------------------------------------------\n\nconst TABLE_HEAD = [\n  { id: 'NNI', label: 'NNI', align: 'left' },\n  { id: 'Nom', label: 'Nom', align: 'left' },\n\n  { id: 'Point focal', label: 'Point focal', align: 'left' },\n  { id: 'Bureau', label: 'Bureau', align: 'left' },\n\n  { id: 'Date', label: 'Date', align: 'left' },\n  {},\n];\nconst FILTER_OPTIONS = [\n  { id: 1, label: 'NNI erronés' },\n  { id: 2, label: \"Duplication d'information\" },\n  { id: 3, label: 'Conflux' },\n];\n\n// ----------------------------------------------------------------------\n\nexport default function ErrorCampainDetailsPage() {\n  const theme = useTheme();\n\n  const { themeStretch } = useSettingsContext();\n\n  const navigate = useNavigate();\n\n  const {\n    dense,\n    page,\n    order,\n    orderBy,\n    rowsPerPage,\n    setPage,\n    //\n    selected,\n    onSelectRow,\n    //\n    onSort,\n    onChangeDense,\n    onChangePage,\n    onChangeRowsPerPage,\n  } = useTable({ defaultOrderBy: 'createDate' });\n\n  const [filterName, setFilterName] = useState('');\n\n  const [openConfirm, setOpenConfirm] = useState(false);\n\n  const [filterStatus, setFilterStatus] = useState('');\n\n  const [filterWillaya, setFilterWillaya] = useState('');\n\n  const [filterMougataa, setFilterMoughataa] = useState('');\n\n  const [filterEndDate, setFilterEndDate] = useState<Date | null>(null);\n\n  const [filterStartDate, setFilterStartDate] = useState<Date | null>(null);\n\n  const [filterOption, setFilterOption] = useState('NNI erronés');\n\n  const [tableData, setTableData] = useState<Member[]>([]);\n\n  const getAllActes = useCallback(async (pageNumber: number, sizeToGet: number, nni?: string) => {\n    // CampainService.getAllActes(pageNumber, sizeToGet, nni)\n    //   .then((response: any) => {\n    //     const data = response.data;\n    //     const { content } = data;\n    //     setTableData(content);\n    //     console.log('Data Actes From API :OK', content);\n    //   })\n    //   .catch((e: Error) => {\n    //     console.log(e);\n    //   });\n    const content = CampainService.getListMembers();\n    setTableData(content);\n  }, []);\n\n  useEffect(() => {\n    getAllActes(0, 10);\n  }, [getAllActes]);\n\n  const denseHeight = dense ? 56 : 76;\n\n  const isFiltered =\n    filterWillaya !== '' ||\n    filterMougataa !== '' ||\n    filterName !== '' ||\n    (!!filterStartDate && !!filterEndDate);\n\n  const isNotFound = false;\n\n  const handleOpenConfirm = () => {\n    setOpenConfirm(true);\n  };\n\n  const handleCloseConfirm = () => {\n    setOpenConfirm(false);\n  };\n\n  const handleFilterStatus = (event: React.SyntheticEvent<Element, Event>, newValue: string) => {\n    setPage(0);\n    setFilterStatus(newValue);\n  };\n\n  const handleFilterName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterName(event.target.value);\n  };\n\n  const handleFilterWillaya = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterWillaya(event.target.value);\n  };\n  const handleFilterOption = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterOption(event.target.value);\n  };\n\n  const handleFilterMoughataa = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterMoughataa(event.target.value);\n  };\n  const handleDeleteRow = (id: string) => {};\n\n  const handleEditRow = (id: string) => {\n    navigate(PATH_DASHBOARD.invoice.edit(id));\n  };\n\n  const handleViewRow = (id: string) => {\n    navigate(PATH_DASHBOARD.invoice.view(id));\n  };\n\n  const handleResetFilter = () => {\n    setFilterName('');\n    setFilterMoughataa('');\n    setFilterWillaya('');\n    setFilterOption('');\n    setFilterEndDate(null);\n    setFilterStartDate(null);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title> Campagnes: List | Minimal UI</title>\n      </Helmet>\n\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <CustomBreadcrumbs\n          heading=\"Campagnes\"\n          links={[\n            {\n              name: 'Tableaux de bord',\n              href: '',\n            },\n            {\n              name: 'Liste des adherants',\n              href: PATH_DASHBOARD.vaccinCamp.list,\n            },\n            {\n              name: 'Listes',\n            },\n          ]}\n        />\n\n        <Card>\n          <Divider />\n\n          {/* <ActesTableToolbar\n            isFiltered={isFiltered}\n            filterName={filterName}\n            filterWillaya={filterWillaya}\n            filterMougataa={filterMougataa}\n            filterEndDate={filterEndDate}\n            onFilterName={handleFilterName}\n            onResetFilter={handleResetFilter}\n            filterStartDate={filterStartDate}\n            isError\n            filerOptions={FILTER_OPTIONS}\n            filterOption={filterOption}\n            onFilterOption={handleFilterOption}\n            onFilterWillaya={handleFilterWillaya}\n            onFilterMoughataa={handleFilterMoughataa}\n            onFilterStartDate={(newValue) => {\n              setFilterStartDate(newValue);\n            }}\n            onFilterEndDate={(newValue) => {\n              setFilterEndDate(newValue);\n            }}\n          />\n\n          <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\n            <TableSelectedAction\n              dense={dense}\n              numSelected={selected.length}\n              rowCount={1}\n              onSelectAllRows={() => null}\n              action={\n                <Stack direction=\"row\">\n                  <Tooltip title=\"Sent\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"ic:round-send\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Download\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:download-outline\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Print\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:printer-fill\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Delete\">\n                    <IconButton color=\"primary\" onClick={handleOpenConfirm}>\n                      <Iconify icon=\"eva:trash-2-outline\" />\n                    </IconButton>\n                  </Tooltip>\n                </Stack>\n              }\n            />\n\n            <Scrollbar>\n              <Table size={dense ? 'small' : 'medium'} sx={{ minWidth: 800 }}>\n                <TableHeadCustom\n                  order={order}\n                  orderBy={orderBy}\n                  headLabel={TABLE_HEAD}\n                  rowCount={1}\n                  numSelected={selected.length}\n                  onSort={onSort}\n                  onSelectAllRows={() => null}\n                />\n\n                <TableBody>\n                  {tableData\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row) => (\n                      <ActesTableRow\n                        isError\n                        key={row.id}\n                        row={row}\n                        selected={selected.includes(row.id.toString())}\n                        onSelectRow={() => onSelectRow(row.id.toString())}\n                        onViewRow={() => handleViewRow(row.id.toString())}\n                        onEditRow={() => handleEditRow(row.id.toString())}\n                        onDeleteRow={() => handleDeleteRow(row.id.toString())}\n                      />\n                    ))}\n\n                  <TableEmptyRows\n                    height={denseHeight}\n                    emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\n                  />\n\n                  <TableNoData isNotFound={isNotFound} />\n                </TableBody>\n              </Table>\n            </Scrollbar>\n          </TableContainer>\n\n          <TablePaginationCustom\n            count={1}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            onPageChange={onChangePage}\n            onRowsPerPageChange={onChangeRowsPerPage}\n            //\n            dense={dense}\n            onChangeDense={onChangeDense}\n          /> */}\n          <ActesTableToolbar\n            isFiltered={isFiltered}\n            filterName={filterName}\n            filterWillaya={filterWillaya}\n            filterMougataa={filterMougataa}\n            onFilterName={handleFilterName}\n            onResetFilter={handleResetFilter}\n            onFilterWillaya={handleFilterWillaya}\n            onFilterMoughataa={handleFilterMoughataa}\n            onFilterStartDate={(newValue) => {\n              setFilterStartDate(newValue);\n            }}\n            onFilterEndDate={(newValue) => {\n              setFilterEndDate(newValue);\n            }}\n            filterStartDate={undefined}\n            filterEndDate={undefined}\n\n            // by thne\n            // filterPointFocal={filterPointFocal}\n            // filterBureau={filterBureau}\n            // onFilterPointFocal={handleFilterPointFocal}\n            // onFilterBureau={handleFilterBureau}\n          />\n\n          <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\n            <TableSelectedAction\n              dense={dense}\n              numSelected={selected.length}\n              rowCount={1}\n              onSelectAllRows={() => null}\n              action={\n                <Stack direction=\"row\">\n                  <Tooltip title=\"Sent\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"ic:round-send\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Download\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:download-outline\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Print\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:printer-fill\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Delete\">\n                    <IconButton color=\"primary\" onClick={handleOpenConfirm}>\n                      <Iconify icon=\"eva:trash-2-outline\" />\n                    </IconButton>\n                  </Tooltip>\n                </Stack>\n              }\n            />\n\n            <Scrollbar>\n              <Table size={dense ? 'small' : 'medium'} sx={{ minWidth: 800 }}>\n                <TableHeadCustom\n                  order={order}\n                  orderBy={orderBy}\n                  headLabel={TABLE_HEAD}\n                  rowCount={1}\n                  numSelected={selected.length}\n                  onSort={onSort}\n                  onSelectAllRows={() => null}\n                />\n\n                <TableBody>\n                  {tableData\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map(\n                      (row) =>\n                        row.statut === 2 && (\n                          <ActesTableRow\n                            key={row.id}\n                            row={row}\n                            selected={selected.includes(row.id.toString())}\n                            onSelectRow={() => onSelectRow(row.id.toString())}\n                            onViewRow={() => handleViewRow(row.id.toString())}\n                            onEditRow={() => handleEditRow(row.id.toString())}\n                            onDeleteRow={() => handleDeleteRow(row.id.toString())}\n                          />\n                        )\n                    )}\n\n                  <TableEmptyRows\n                    height={denseHeight}\n                    emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\n                  />\n\n                  <TableNoData isNotFound={isNotFound} />\n                </TableBody>\n              </Table>\n            </Scrollbar>\n          </TableContainer>\n\n          <TablePaginationCustom\n            count={1}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            onPageChange={onChangePage}\n            onRowsPerPageChange={onChangeRowsPerPage}\n            //\n            dense={dense}\n            onChangeDense={onChangeDense}\n          />\n        </Card>\n      </Container>\n\n      <ConfirmDialog\n        open={openConfirm}\n        onClose={handleCloseConfirm}\n        title=\"Delete\"\n        content={\n          <>\n            Êtes-vous sûr que vous souhaitez supprimer <strong> {selected.length} </strong> actes?\n          </>\n        }\n        action={\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              // handleDeleteRows(selected);\n              handleCloseConfirm();\n            }}\n          >\n            Supprimer\n          </Button>\n        }\n      />\n    </>\n  );\n}\n// ----------------------------------------------------------------------\n"],"names":["TABLE_HEAD","id","label","align","ErrorCampainDetailsPage","useTheme","themeStretch","useSettingsContext","navigate","useNavigate","useTable","defaultOrderBy","dense","page","order","orderBy","rowsPerPage","setPage","selected","onSelectRow","onSort","onChangeDense","onChangePage","onChangeRowsPerPage","useState","filterName","setFilterName","openConfirm","setOpenConfirm","filterWillaya","setFilterWillaya","filterMougataa","setFilterMoughataa","filterEndDate","setFilterEndDate","filterStartDate","setFilterStartDate","setFilterOption","tableData","setTableData","getAllActes","useCallback","pageNumber","sizeToGet","nni","content","CampainService","useEffect","denseHeight","isFiltered","handleCloseConfirm","maxWidth","heading","links","name","href","PATH_DASHBOARD","onFilterName","event","target","value","onResetFilter","onFilterWillaya","onFilterMoughataa","onFilterStartDate","newValue","onFilterEndDate","undefined","sx","position","overflow","numSelected","length","rowCount","onSelectAllRows","action","direction","title","color","icon","onClick","size","minWidth","headLabel","slice","map","row","statut","includes","toString","onViewRow","onEditRow","onDeleteRow","height","emptyRows","isNotFound","count","onPageChange","onRowsPerPageChange","open","onClose","variant"],"sourceRoot":""}