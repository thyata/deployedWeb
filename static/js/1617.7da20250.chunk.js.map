{"version":3,"file":"static/js/1617.7da20250.chunk.js","mappings":"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","sources":["sections/@dashboard/paramettre/multiSelectList.tsx","pages/dashboard/vaccination/List/effets_indesirable/list/EffetIndesirableListPage.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { roleList } from 'src/assets/data/gestionData';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport default function SelectRole() {\r\n  const [personName, setPersonName] = React.useState<string[]>([]);\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof personName>) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setPersonName(\r\n      // On autofill we get a stringified value.\r\n      typeof value === 'string' ? value.split(',') : value\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl sx={{ m: 1 }} fullWidth>\r\n        <InputLabel id=\"demo-multiple-checkbox-label\">Selectionner les roles</InputLabel>\r\n        <Select\r\n          labelId=\"demo-multiple-checkbox-label\"\r\n          id=\"demo-multiple-checkbox\"\r\n          multiple\r\n          value={personName}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput label=\"Selectionner les roles\" />}\r\n          renderValue={(selected) => selected.join(', ')}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {roleList.map((item) => (\r\n            <MenuItem key={item.id} value={item.roleName}>\r\n              <Checkbox checked={personName.indexOf(item.roleName) > -1} />\r\n              <ListItemText primary={item.roleName} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\nimport { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// @mui\nimport { useTheme } from '@mui/material/styles';\nimport {\n  Tab,\n  Tabs,\n  Card,\n  Table,\n  Stack,\n  Button,\n  Tooltip,\n  Divider,\n  TableBody,\n  Container,\n  IconButton,\n  TableContainer,\n  Link,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Typography,\n} from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from 'src/routes/paths';\n// _mock_\nimport { _invoices } from 'src/_mock/arrays';\n// @types\nimport { Effet, Supervisor } from 'src/@types/Campain';\n// components\nimport Iconify from 'src/components/iconify';\nimport Scrollbar from 'src/components/scrollbar';\nimport ConfirmDialog from 'src/components/confirm-dialog';\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\nimport { useSettingsContext } from 'src/components/settings';\nimport {\n  useTable,\n  emptyRows,\n  TableNoData,\n  TableEmptyRows,\n  TableHeadCustom,\n  TableSelectedAction,\n  TablePaginationCustom,\n} from 'src/components/table';\n// sections\nimport { EffetTableRow } from 'src/sections/@dashboard/vaccinCampagne/effet_indesirable/list';\nimport SupervisorTableRow from 'src/sections/@dashboard/paramettre/supervisorTableRow';\nimport { TABLE_HEAD_SUPERVISOR, supervisorList } from 'src/assets/data/gestionData';\nimport SvgIcon from '@mui/material/SvgIcon';\n\nimport SelectRole from 'src/sections/@dashboard/paramettre/multiSelectList';\nimport { el } from 'date-fns/locale';\n// ----------------------------------------------------------------------\n\n// ----------------------------------------------------------------------\n\nexport default function EffetIndesirableListPage() {\n  const theme = useTheme();\n\n  const { themeStretch } = useSettingsContext();\n\n  const navigate = useNavigate();\n\n  const {\n    dense,\n    page,\n    order,\n    orderBy,\n    rowsPerPage,\n    setPage,\n    //\n    selected,\n    onSelectRow,\n    onSelectAllRows,\n    //\n    onSort,\n    onChangeDense,\n    onChangePage,\n    onChangeRowsPerPage,\n  } = useTable({ defaultOrderBy: 'createDate' });\n\n  const [tableData, setTableData] = useState<Supervisor[]>([]);\n\n  const [filterName, setFilterName] = useState('');\n\n  const [openConfirm, setOpenConfirm] = useState(false);\n\n  const [filterStatus, setFilterStatus] = useState('');\n\n  const [filterWillaya, setFilterWillaya] = useState('');\n\n  const [myRowsPerPage, setMyRowsPerPage] = useState(5);\n\n  const [myPage, setMyPage] = useState(1);\n\n  const [filterMougataa, setFilterMoughataa] = useState('');\n\n  const [filterEndDate, setFilterEndDate] = useState<Date | null>(null);\n\n  const [filterStartDate, setFilterStartDate] = useState<Date | null>(null);\n\n  useEffect(() => {\n    setTableData(supervisorList);\n    console.log('row par page', myRowsPerPage);\n    console.log('page ', myPage);\n  }, [myRowsPerPage, myPage]);\n\n  const denseHeight = dense ? 56 : 76;\n\n  const isFiltered =\n    filterWillaya !== '' ||\n    filterMougataa !== '' ||\n    filterName !== '' ||\n    (!!filterStartDate && !!filterEndDate);\n\n  const isNotFound = false;\n\n  const onChangeMyRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMyRowsPerPage(+event.target.value);\n  };\n  const onChangeMyPage = (event: unknown, newPage: number) => {\n    setMyPage(newPage);\n  };\n\n  const getLengthByStatus = (status: string) => 1;\n\n  const TABS = [{ value: 'all', label: 'All', color: 'info', count: 1 }] as const;\n\n  const handleOpenConfirm = () => {\n    setOpenConfirm(true);\n  };\n\n  const handleCloseConfirm = () => {\n    setOpenConfirm(false);\n  };\n\n  const handleFilterStatus = (event: React.SyntheticEvent<Element, Event>, newValue: string) => {\n    setPage(0);\n    setFilterStatus(newValue);\n  };\n\n  const handleFilterName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterName(event.target.value);\n  };\n\n  const handleFilterWillaya = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterWillaya(event.target.value);\n  };\n  const handleFilterMoughataa = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPage(0);\n    setFilterMoughataa(event.target.value);\n  };\n  const handleDeleteRow = (id: string) => {};\n\n  const handleEditRow = (id: string) => {\n    navigate(PATH_DASHBOARD.invoice.edit(id));\n  };\n\n  const handleViewRow = (id: string) => {\n    navigate(PATH_DASHBOARD.invoice.view(id));\n  };\n\n  const handleResetFilter = () => {\n    setFilterName('');\n    setFilterMoughataa('');\n    setFilterWillaya('');\n    setFilterEndDate(null);\n    setFilterStartDate(null);\n  };\n\n  const [openModal, setOpenModal] = useState(false);\n  const [openModalList, setOpenModalList] = useState(false);\n  const [selectedSupervisor, setSelectedSupervisor] = useState<Supervisor[]>([]);\n\n  const getSupervisorName = (elm: any) => {\n    if (elm.length !== 0) {\n      console.log(supervisorList);\n      console.log(elm);\n\n      let usernameList: Supervisor;\n\n      console.log('====>2');\n      elm.forEach((item: string) => {\n        usernameList = supervisorList.find((list) => list.id === item);\n      });\n\n      console.log(usernameList);\n      return `${usernameList.nom}`;\n    }\n    return '';\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title> Superviseur: List | Minimal UI</title>\n      </Helmet>\n\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <CustomBreadcrumbs\n          heading=\"Listes des acteurs politiques\"\n          links={[\n            {\n              name: 'Tableaux de bord',\n              href: '',\n            },\n            {\n              name: 'Listes',\n            },\n          ]}\n        />\n        <Stack\n          mb={5}\n          direction=\"row\"\n          // sx={{ right: 10, position: 'absolute', top: '-20' }}\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n        >\n          <Button\n            variant=\"contained\"\n            startIcon={<Iconify icon=\"eva:plus-fill\" />}\n            onClick={() => setOpenModal(true)}\n          >\n            Ajouter un acteur politique\n          </Button>\n        </Stack>\n\n        <Dialog fullWidth maxWidth=\"sm\" open={openModal} onClose={() => setOpenModal(false)}>\n          <DialogTitle sx={{ pb: 2 }}>\n            <Typography>Ajouter un acteur politique</Typography>\n          </DialogTitle>\n          <DialogContent>\n            <Stack spacing={1} margin={1} direction=\"row\">\n              <TextField variant=\"outlined\" label=\"Nom complet\" fullWidth />\n              <TextField variant=\"outlined\" label=\"Numéro de téléphone\" fullWidth />\n            </Stack>\n          </DialogContent>\n\n          <DialogActions>\n            <Button variant=\"outlined\" onClick={() => {}}>\n              Ajouter\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <Dialog\n          fullWidth\n          maxWidth=\"sm\"\n          open={openModalList}\n          onClose={() => setOpenModalList(false)}\n        >\n          <DialogTitle sx={{ pb: 2 }}>\n            <Typography>\n              Attribuer des permission a {getSupervisorName(selected).toString()}\n            </Typography>\n          </DialogTitle>\n          <DialogContent>\n            <SelectRole />\n          </DialogContent>\n\n          <DialogActions>\n            <Button variant=\"outlined\" onClick={() => {}}>\n              Ajouter\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <Card>\n          <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\n            <TableSelectedAction\n              dense={dense}\n              numSelected={selected.length}\n              rowCount={1}\n              onSelectAllRows={(checked) =>\n                onSelectAllRows(\n                  checked,\n                  tableData.map((row) => row.id)\n                )\n              }\n              action={\n                <Stack direction=\"row\">\n                  <Tooltip title=\"Grant permission\">\n                    <IconButton color=\"primary\" onClick={() => setOpenModalList(true)}>\n                      <Iconify icon=\"ic:settings\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Sent\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"ic:round-send\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Download\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:download-outline\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Print\">\n                    <IconButton color=\"primary\">\n                      <Iconify icon=\"eva:printer-fill\" />\n                    </IconButton>\n                  </Tooltip>\n\n                  <Tooltip title=\"Delete\">\n                    <IconButton color=\"primary\" onClick={handleOpenConfirm}>\n                      <Iconify icon=\"eva:trash-2-outline\" />\n                    </IconButton>\n                  </Tooltip>\n                </Stack>\n              }\n            />\n\n            <Scrollbar>\n              <Table size={dense ? 'small' : 'medium'} sx={{ minWidth: 800 }}>\n                <TableHeadCustom\n                  order={order}\n                  orderBy={orderBy}\n                  headLabel={TABLE_HEAD_SUPERVISOR}\n                  rowCount={1}\n                  numSelected={selected.length}\n                  onSort={onSort}\n                  onSelectAllRows={() => null}\n                />\n\n                <TableBody>\n                  {tableData\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row) => (\n                      <SupervisorTableRow\n                        key={row.id}\n                        row={row}\n                        selected={selected.includes(row.id.toString())}\n                        onSelectRow={() => onSelectRow(row.id.toString())}\n                        onViewRow={() => handleViewRow(row.id.toString())}\n                        onEditRow={() => handleEditRow(row.id.toString())}\n                        onDeleteRow={() => handleDeleteRow(row.id.toString())}\n                      />\n                    ))}\n\n                  <TableEmptyRows\n                    height={denseHeight}\n                    emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\n                  />\n\n                  <TableNoData isNotFound={isNotFound} />\n                </TableBody>\n              </Table>\n            </Scrollbar>\n          </TableContainer>\n\n          <TablePaginationCustom\n            count={1}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            onPageChange={onChangePage}\n            onRowsPerPageChange={onChangeRowsPerPage}\n            //\n            dense={dense}\n            onChangeDense={onChangeDense}\n          />\n        </Card>\n      </Container>\n\n      <ConfirmDialog\n        open={openConfirm}\n        onClose={handleCloseConfirm}\n        title=\"Delete\"\n        content={\n          <>\n            Êtes-vous sûr que vous souhaitez supprimer <strong> {selected.length} </strong> actes?\n          </>\n        }\n        action={\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={() => {\n              // handleDeleteRows(selected);\n              handleCloseConfirm();\n            }}\n          >\n            Supprimer\n          </Button>\n        }\n      />\n    </>\n  );\n}\n// ----------------------------------------------------------------------\n"],"names":["MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","SelectRole","React","personName","setPersonName","FormControl","sx","m","fullWidth","InputLabel","id","Select","labelId","multiple","value","onChange","event","target","split","input","OutlinedInput","label","renderValue","selected","join","roleList","item","MenuItem","roleName","Checkbox","checked","indexOf","ListItemText","primary","EffetIndesirableListPage","useTheme","themeStretch","useSettingsContext","navigate","useNavigate","useTable","defaultOrderBy","dense","page","order","orderBy","rowsPerPage","setPage","onSelectRow","onSelectAllRows","onSort","onChangeDense","onChangePage","onChangeRowsPerPage","useState","tableData","setTableData","openConfirm","setOpenConfirm","myRowsPerPage","myPage","useEffect","supervisorList","console","log","denseHeight","handleCloseConfirm","openModal","setOpenModal","openModalList","setOpenModalList","Container","maxWidth","heading","links","name","href","Stack","mb","direction","alignItems","justifyContent","Button","variant","startIcon","icon","onClick","Dialog","open","onClose","DialogTitle","pb","Typography","DialogContent","spacing","margin","TextField","DialogActions","elm","usernameList","length","forEach","list","nom","getSupervisorName","toString","Card","TableContainer","position","overflow","numSelected","rowCount","map","row","action","Tooltip","title","IconButton","color","Table","size","minWidth","headLabel","TABLE_HEAD_SUPERVISOR","TableBody","slice","includes","onViewRow","PATH_DASHBOARD","onEditRow","onDeleteRow","height","emptyRows","isNotFound","count","onPageChange","onRowsPerPageChange","content"],"sourceRoot":""}