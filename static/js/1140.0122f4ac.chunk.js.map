{"version":3,"file":"static/js/1140.0122f4ac.chunk.js","mappings":"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","sources":["pages/dashboard/gestionnaire_effectif/level_1/DARS/DRAS_NewEditForm.tsx","pages/dashboard/gestionnaire_effectif/level_1/DARS/DRAS_CreatePage.tsx"],"sourcesContent":["import { useState, useMemo, useEffect } from 'react';\n\nimport { PATH_DASHBOARD } from 'src/routes/paths';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\n// form\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { LoadingButton } from '@mui/lab';\nimport { Card, Stack } from '@mui/material';\n\n// components\nimport FormProvider from 'src/components/hook-form';\nimport { useSnackbar } from 'src/components/snackbar';\n\n// Service\nimport CampainService from 'src/services/CampainService';\n// Form\nimport Form from '../../Forms/Etablissement/Form';\nimport { FormValuesProps } from '../../Forms/Etablissement/FormPropsValues';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  isEdit?: boolean;\n  etablissement?: FormValuesProps;\n};\n\nexport default function DRASNewEditForm({ isEdit, etablissement }: Props) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n  const [loadingSend, setLoadingSend] = useState(false);\n\n  const NewUserSchema = Yup.object().shape({\n  nom: Yup.string().nullable().required(\"Le nom d'établissement est obligatoire\"),\n  imgUrl: Yup.string().nullable().required(\"Importer l'image d'établissement\"),\n  responsable: Yup.object().shape({\n    nom: Yup.string().nullable().required(\"Le nom du responsable est obligatoire\"),\n    post: Yup.string().nullable().required(\"Le poste du responsable est obligatoire\"),\n    email: Yup.string().email().nullable().required(\"L'adresse e-mail du responsable est obligatoire\"),\n    telephone: Yup.string().nullable().required(\"Le numéro de téléphone du responsable est obligatoire\"),\n    password: Yup.string().nullable().required(\"Le mot de passe du responsable est obligatoire\"),\n  }),\n  location: Yup.object().shape({\n    region: Yup.object().shape({\n      id: Yup.number().min(1).required(\"La région est obligatoire\"),\n    }),\n  }),\n});\n  \n  const defaultValues = useMemo(\n    () => ({\n      id:etablissement?.id,\n      nom: etablissement?.nom || '',\n      imgUrl:etablissement?.imgUrl || '',\n      responsable:etablissement?.responsable || {nom:'',post:'',email:'',telephone:'',password:''},\n      location:etablissement?.location || {region:{id:0},},\n    }),\n    [etablissement]\n  );\n\n\n  const methods = useForm<FormValuesProps>({\n    resolver: yupResolver(NewUserSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n\n  useEffect(() => {\n    if (isEdit && etablissement) { \n       reset(defaultValues);\n    }\n    if (!isEdit) {\n      reset(defaultValues);\n    }\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isEdit, etablissement]);\n\n  \n\n  const handleCreateAndSend = async (data: FormValuesProps) => {\n    setLoadingSend(true);\n\n    try {\n      // CampainService.createCampaign(data)\n      // .then((response: any) => {\n      //   console.log(response.data);\n      // })\n      // .catch((e: Error) => {\n      //   console.log(e);\n      // });\n      reset();\n      enqueueSnackbar(!isEdit ? 'La création a été realise avec succès!' : 'La mis à jour a été realise avec succès!');\n      setLoadingSend(false);\n      navigate(PATH_DASHBOARD.gestionnaireEffectif.centreHomePage);\n      console.log('DATA', data);\n    } catch (error) {\n      console.error(error);\n      setLoadingSend(false);\n    }\n  };\n\n  return (\n    <FormProvider methods={methods}>\n      <Card>\n       {/* {isEdit&&<Form isEdit selectedsState={selectedState} idType={firstId} ExistStartDate={campagneVaccination?.startDate} ExistEndDate={campagneVaccination?.endDate}/>}\n       */}\n       {!isEdit && <Form/>}\n       \n      </Card>\n      <Stack justifyContent=\"flex-end\" direction=\"row\" spacing={2} sx={{ mt: 3 }}>\n\n        <LoadingButton\n          size=\"large\"\n          variant=\"contained\"\n          loading={loadingSend && isSubmitting}\n          onClick={handleSubmit(handleCreateAndSend)}\n        >\n          {isEdit ? 'Modifier' : 'Créer'}\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n// @mui\nimport { Container } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from 'src/routes/paths';\n// components\nimport { useSettingsContext } from 'src/components/settings';\nimport CustomBreadcrumbs from 'src/components/custom-breadcrumbs';\nimport DRASNewEditForm from './DRAS_NewEditForm';\n\n\n\n// ----------------------------------------------------------------------\n\n\nexport default function DRAS_CreatePage(){\n  const { themeStretch } = useSettingsContext();\n\n  return (\n    <>\n      <Helmet>\n        <title> Ajouter un établissement | Minimal UI</title>\n      </Helmet>\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <CustomBreadcrumbs\n          heading=\"Ajouter un établissement\"\n          links={[\n            {\n              name: 'Tableau de bord',\n             \n            },\n            {\n              name: 'Liste des établissements',\n              href: PATH_DASHBOARD.gestionnaireEffectif.centreHomePage,\n            },\n            { name: \"Formulaire de création d'un établissement\" },\n          ]}\n        />\n        <DRASNewEditForm/>\n      </Container>\n    </>\n  );\n}\n"],"names":["DRASNewEditForm","isEdit","etablissement","navigate","useNavigate","enqueueSnackbar","useSnackbar","useState","loadingSend","setLoadingSend","NewUserSchema","Yup","shape","nom","nullable","required","imgUrl","responsable","post","email","telephone","password","location","region","id","min","defaultValues","useMemo","methods","useForm","resolver","yupResolver","reset","handleSubmit","isSubmitting","formState","useEffect","handleCreateAndSend","data","PATH_DASHBOARD","console","log","error","Card","Form","Stack","justifyContent","direction","spacing","sx","mt","LoadingButton","size","variant","loading","onClick","DRAS_CreatePage","themeStretch","useSettingsContext","Container","maxWidth","heading","links","name","href"],"sourceRoot":""}