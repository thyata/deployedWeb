{"version":3,"file":"static/js/1698.b867d2db.chunk.js","mappings":"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","sources":["sections/auth/AuthLoginForm.tsx","sections/auth/Login.tsx","pages/auth/LoginPage.tsx"],"sourcesContent":["import { useState } from 'react';\nimport * as Yup from 'yup';\nimport { Link as RouterLink } from 'react-router-dom';\n// form\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Link, Stack, Alert, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// auth\nimport { useAuthContext } from '../../auth/useAuthContext';\n// components\nimport Iconify from '../../components/iconify';\nimport FormProvider, { RHFTextField } from '../../components/hook-form';\n\n// ----------------------------------------------------------------------\n\ntype FormValuesProps = {\n  email: string;\n  password: string;\n  afterSubmit?: string;\n};\n\nexport default function AuthLoginForm() {\n  const { login } = useAuthContext();\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const defaultValues = {\n    email: 'demo@minimals.cc',\n    password: 'demo1234',\n  };\n\n  const methods = useForm<FormValuesProps>({\n    resolver: yupResolver(LoginSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    setError,\n    handleSubmit,\n    formState: { errors, isSubmitting, isSubmitSuccessful },\n  } = methods;\n\n  const onSubmit = async (data: FormValuesProps) => {\n    try {\n      await login(data.email, data.password);\n    } catch (error) {\n      console.error(error);\n      reset();\n      setError('afterSubmit', {\n        ...error,\n        message: error.message,\n      });\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        {!!errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>}\n\n        <RHFTextField name=\"email\" label=\"Email address\" />\n\n        <RHFTextField\n          name=\"password\"\n          label=\"Password\"\n          type={showPassword ? 'text' : 'password'}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Stack>\n\n      <Stack alignItems=\"flex-end\" sx={{ my: 2 }}>\n        <Link\n          component={RouterLink}\n          to={PATH_AUTH.resetPassword}\n          variant=\"body2\"\n          color=\"inherit\"\n          underline=\"always\"\n        >\n          Forgot password?\n        </Link>\n      </Stack>\n\n      <LoadingButton\n        fullWidth\n        color=\"inherit\"\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        loading={isSubmitSuccessful || isSubmitting}\n        sx={{\n          bgcolor: 'text.primary',\n          color: (theme) => (theme.palette.mode === 'light' ? 'common.white' : 'grey.800'),\n          '&:hover': {\n            bgcolor: 'text.primary',\n            color: (theme) => (theme.palette.mode === 'light' ? 'common.white' : 'grey.800'),\n          },\n        }}\n      >\n        Login\n      </LoadingButton>\n    </FormProvider>\n  );\n}\n","import { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { Alert, Tooltip, Stack, Typography, Link, Box } from '@mui/material';\n// auth\nimport { useAuthContext } from '../../auth/useAuthContext';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// layouts\nimport LoginLayout from '../../layouts/login';\n//\nimport AuthLoginForm from './AuthLoginForm';\nimport AuthWithSocial from './AuthWithSocial';\n\n// ----------------------------------------------------------------------\n\nexport default function Login() {\n  const { method } = useAuthContext();\n\n  return (\n    <LoginLayout>\n      <Stack spacing={2} sx={{ mb: 5, position: 'relative' }}>\n        <Typography variant=\"h4\">Sign in to Minimal</Typography>\n\n        <Stack direction=\"row\" spacing={0.5}>\n          <Typography variant=\"body2\">New user?</Typography>\n\n          <Link component={RouterLink} to={PATH_AUTH.register} variant=\"subtitle2\">\n            Create an account\n          </Link>\n        </Stack>\n\n        <Tooltip title={method} placement=\"left\">\n          <Box\n            component=\"img\"\n            alt={method}\n            src={`/assets/icons/auth/ic_${method}.png`}\n            sx={{ width: 32, height: 32, position: 'absolute', right: 0 }}\n          />\n        </Tooltip>\n      </Stack>\n\n      <Alert severity=\"info\" sx={{ mb: 3 }}>\n        Use email : <strong>demo@minimals.cc</strong> / password :<strong> demo1234</strong>\n      </Alert>\n\n      <AuthLoginForm />\n\n      <AuthWithSocial />\n    </LoginLayout>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport Login from '../../sections/auth/Login';\n// import Login from '../../sections/auth/LoginAuth0';\n\n// ----------------------------------------------------------------------\n\nexport default function LoginPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Login | Minimal UI</title>\n      </Helmet>\n\n      <Login />\n    </>\n  );\n}\n"],"names":["AuthLoginForm","login","useAuthContext","useState","showPassword","setShowPassword","LoginSchema","Yup","shape","email","required","password","methods","useForm","resolver","yupResolver","defaultValues","reset","setError","handleSubmit","formState","errors","isSubmitting","isSubmitSuccessful","onSubmit","data","console","error","message","Stack","spacing","afterSubmit","Alert","severity","name","label","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","icon","alignItems","sx","my","Link","component","RouterLink","to","PATH_AUTH","variant","color","underline","LoadingButton","fullWidth","size","loading","bgcolor","theme","palette","mode","Login","method","mb","Typography","direction","Tooltip","title","placement","Box","alt","src","width","height","right","AuthWithSocial","LoginPage"],"sourceRoot":""}